// Nama : Muhammad
// NIM : 2501994866

#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#include<ctype.h>

#define TABLE_SIZE 10

struct node {
    char data[100];
    struct node *next;
} *hashTable[TABLE_SIZE], *curr;

int hashMethod = 1;
int collisionMethod = 1;

// Hash Function Methods
int midSquareHash(int key) {
    key = key * key;
    int mid = (key / 100) % 100;
    return mid % TABLE_SIZE;
}

int divisionHash(int key) {
    return key % TABLE_SIZE;
}

int foldingHash(int key) {
    int part1 = key / 1000;
    int part2 = key % 1000;
    return (part1 + part2) % TABLE_SIZE;
}

int digitExtractionHash(int key) {
    return (key / 10) % TABLE_SIZE;
}

int rotationHash(int key) {
    int lastDigit = key % 10;
    key = (key / 10) + (lastDigit * 1000);
    return key % TABLE_SIZE;
}

int hashFunction(char data[]) {
    int key = tolower(data[0]) - 'a';
    switch (hashMethod) {
        case 1: return midSquareHash(key);
        case 2: return divisionHash(key);
        case 3: return foldingHash(key);
        case 4: return digitExtractionHash(key);
        case 5: return rotationHash(key);
        default: return divisionHash(key);
    }
}

void viewHashTable() {
    for (int i = 0; i < TABLE_SIZE; i++) {
        printf("Index [%d]: ", i);
        curr = hashTable[i];
        while (curr) {
            printf("%s -> ", curr->data);
            curr = curr->next;
        }
        printf("NULL\n");
    }
}

void pushBack(int hashKey, char data[]) {
    struct node *newNode = (struct node*)malloc(sizeof(struct node));
    strcpy(newNode->data, data);
    newNode->next = NULL;

    if (collisionMethod == 1) { // Chaining
        newNode->next = hashTable[hashKey];
        hashTable[hashKey] = newNode;
    } else if (collisionMethod == 2) { // Linear Probing
        int newIndex = hashKey;
        while (hashTable[newIndex] != NULL) {
            newIndex = (newIndex + 1) % TABLE_SIZE;
        }
        hashTable[newIndex] = newNode;
    } else if (collisionMethod == 3) { // Rehashing
        int newIndex = (hashKey + 1) % TABLE_SIZE;
        while (hashTable[newIndex] != NULL) {
            newIndex = (newIndex + 1) % TABLE_SIZE;
        }
        hashTable[newIndex] = newNode;
    }
}

void menu() {
    printf("Pilih Hash Function:\n");
    printf("1. Mid-Square\n2. Division\n3. Folding\n4. Digit Extraction\n5. Rotation\n");
    printf("Pilihan: ");
    scanf("%d", &hashMethod);
    getchar();

    printf("Pilih Collision Handling:\n");
    printf("1. Chaining (Linked List)\n2. Linear Probing\n3. Rehashing\n");
    printf("Pilihan: ");
    scanf("%d", &collisionMethod);
    getchar();
}

int main() {
    char data[100];
    menu();

    while (1) {
        printf("Input Data: ");
        scanf("%s", data);
        if (strcmp(data, "exit") == 0) break;
        pushBack(hashFunction(data), data);
    }
    viewHashTable();
    return 0;
}
