/* Disjoint Sets Code
(Union by Rank & Path Compression)

Group 7

Muhammad
Putra Panca Prasetya
Samuel */


#include <stdio.h>

const int MAX = 1000;

int parent[MAX];
int rankArr[MAX];

void makeSet(int n)
{
    for (int i = 0; i < n; i++)
    {
        parent[i] = i;
        rankArr[i] = 0;
    }
}

int find(int x)
{
    if (parent[x] != x)
    {
        parent[x] = find(parent[x]); //path compression
    }
    return parent[x];
}

//Union by rank
void unionSets(int x, int y)
{
    int rootX = find(x);
    int rootY = find(y);

    if (rootX != rootY)
    {
        if (rankArr[rootX] < rankArr[rootY])
        {
            parent[rootX] = rootY;
        }
        else if (rankArr[rootX] > rankArr[rootY])
        {
            parent[rootY] = rootX;
        }
        else
        {
            parent[rootY] = rootX;
            rankArr[rootX]++;
        }
    }
}

int main()
{
    int n = 7;
    makeSet(n);

    unionSets(0, 1);
    unionSets(1, 2);
    unionSets(3, 4);
    unionSets(5, 6);
    unionSets(4, 5);

    if (find(2) == find(0))
    {
        printf("2 and 0 are in the same set\n");
    }
    else
    {
        printf("2 and 0 are in different sets\n");
    }

    if (find(3) == find(6))
    {
        printf("3 and 6 are in the same set\n");
    }
    else
    {
        printf("3 and 6 are in different sets\n");
    }

    return 0;
}
